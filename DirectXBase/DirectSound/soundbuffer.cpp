#include "soundbuffer.h"

//コンストラクタ
SoundBuffer::SoundBuffer()
{
	pSecondaryBuffer = NULL;
}

//デストラクタ
SoundBuffer::~SoundBuffer()
{
	Stop();//セカンダリバッファは破棄する前に再生停止する
	if (pSecondaryBuffer != NULL)
	{
		pSecondaryBuffer->Release();
	}
}
//再生開始
void SoundBuffer::Play(bool isLoop)
{
	if (pSecondaryBuffer != NULL)
	{
		DWORD LoopFlag = (isLoop ? DSBPLAY_LOOPING : 0);
		pSecondaryBuffer->Play(0, 0, LoopFlag);
	}
}

//再生停止
void SoundBuffer::Stop()
{
	if (pSecondaryBuffer != NULL)
	{
		pSecondaryBuffer->Stop();
	}
}

//バッファ作成
bool SoundBuffer::Create(IDirectSound8* pDirectSound8, WAVEFORMATEX& WaveFormat, byte* WaveData, int DataSize)
{
	DSBUFFERDESC desc = {};	//セカンダリバッファ作成用設定

	//チャンネル数での分岐　モノラルは1チャンネル　ステレオは2チャンネル

	if (WaveFormat.nChannels == 1)
	{
		//モノラル
		desc.dwFlags = DSBCAPS_CTRL3D | DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLFREQUENCY |
			DSBCAPS_GETCURRENTPOSITION2 | DSBCAPS_CTRLPOSITIONNOTIFY | DSBCAPS_STATIC;
		desc.guid3DAlgorithm = DS3DALG_NO_VIRTUALIZATION;
	}
	else
	{
		//ステレオ
		desc.dwFlags = DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLFREQUENCY |
			DSBCAPS_GETCURRENTPOSITION2 | DSBCAPS_CTRLPOSITIONNOTIFY | DSBCAPS_CTRLPAN | DSBCAPS_STATIC;
		// |DSBCAPS_CTRFX; エフェクトを追加するとDuplicateできない
		desc.guid3DAlgorithm = GUID_NULL;
	}

	desc.dwSize = sizeof(DSBUFFERDESC);
	desc.dwBufferBytes = DataSize;	//音データサイズ指定
	desc.lpwfxFormat = &WaveFormat;	//フォーマット指定

	IDirectSoundBuffer* pPrimaryBuffer = NULL;//プライマリバッファ

	//プライマリバッファ作成
	if (FAILED(pDirectSound8->CreateSoundBuffer(&desc, &pPrimaryBuffer, NULL)))
	{
		//渡されたwaveデータに問題がある
		//初期化されていないか
		//ロード失敗
		//の可能性

		return false;
	}
	//プライマリバッファからセカンダリバッファ作成
	pPrimaryBuffer->QueryInterface(IID_IDirectSoundBuffer8, (void**)&pSecondaryBuffer);
	pPrimaryBuffer->Release();//セカンダリバッファが作成できればプライマリバッファは破棄して構わない

	unsigned char * block1 = NULL;
	unsigned char * block2 = NULL;
	unsigned long blockSize1 = 0;
	unsigned long blockSize2 = 0;

	//セカンダリバッファをロックしてデータ書き込み
	pSecondaryBuffer->Lock(0, DataSize, (void**)&block1, &blockSize1, (void**)&block2, &blockSize2, DSBLOCK_ENTIREBUFFER);
	//セカンダリバッファに音データをコピー
	memcpy(block1, WaveData, DataSize);
	//セカンダリバッファのロックを解除
	pSecondaryBuffer->Unlock(block1, blockSize1, block2, 0);

	return true;
}
